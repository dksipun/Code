IMP
//OOPS Concepts:
	* Object/Constructor:

	* Instance variable/ Object Variable: Ex:	private String owner;

	* method/ Object method
public void setHeight(int height) {
    this.height = height;
}
Here: setHeight is Method. this.height: instance variable, height= parameter

	* parameter: While calling the Methods / constructor(type parameterValue)type object in the call but in the method it will be parameter

	* List<obj>=new Constructor(String FileName); Object in a List:
ArrayList<Person> persons = new ArrayList<>();
persons.add(new Person("Matthew"));

	* static: used for returning in main Class(public static void main), not required in Object Class

	* read File and create Object ArrayList with split file lines, separator
try (Scanner scanner = new Scanner(Paths.get("records.txt"))) {
    while (scanner.hasNextLine()) {
        String line = scanner.nextLine();

	* Multiple Classes (3) | Clock Example

	* Constructor Overloading: multiple constructor with diff passing [parameter]

	* Method Overloading: Ex toString

	* Primitive and reference variables

	* ObjectGivenAsParameter | we can directly use it as parameter[object parameter]

	* Object as object variable [in Clock/SimpleDate Example] [For used it creting constructor we have to pass it as object variable[object type]]

	* Exception Null_Point Raise

	* Object on a list and list as part of an Object

    * Object in an Instance variable [UI Interface Class]

Algorithems
====
Hashmap

Inheritance
Interfaces
Polymorphism

Collection as stream
Comparable Interface

Class Diagram
Packages
Exceptions

Parameters
Array List and Hash Table
Randomness
Multidimensional data

GUI
Application Launch

Data Visualisation
Multimedia in Programs
Maven and Libraries
